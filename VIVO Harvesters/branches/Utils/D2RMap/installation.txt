
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 D2R MAP Processor V0.3
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


D2R MAP is a declarative language to describe mappings between 
relational database schemata and OWL ontologies.

The mappings are used by the D2R processor to export data from 
a relational database to RDF. For details about the D2R mapping
language see: 

http://www.wiwiss.fu-berlin.de/suhl/bizer/d2rmap/D2Rmap.htm

This processor prototype is implemented in Java and is based 
on the Jena API. It exports data as RDF, N3, N-TRIPLES 
and Jena models. 


Changes in version 0.3:

1. Model factory added to support other Jena model implementations like 
   the Tucana Knowledge Server.
2. Driver factory added.
3. Process map methods added to D2R processor. 
4. Connection and driver accessors added to D2R processor. 
5. Error handling changed to Log4J.
6. All nesseary jars have been included into the distribution.
7. Ant build script added.

Changes in version 0.2:

1. We have moved to Jena2.
2. A new class for connecting D2R MAP with Joseki has been added. 


------------------------------------------------------------------
Installation
------------------------------------------------------------------

1. Download the current D2RMAP distribution from 
   http://sourceforge.net/projects/d2r-map 

2. Unzip the distribution file into a convenient directory D2RROOT. 

3. Set your classpath to include all files from the D2RROOT/lib directory


------------------------------------------------------------------
Using the processor from the command line
------------------------------------------------------------------

The processor can be used from the command line. There are three
command line parameters:

-map:filename  	  : path/filename of the D2R mapping file.
-output:filename  : path/filename of the output file.
-format:name 	  : Output format. Possible values are RDF/XML, 
		    RDF/XML-ABBREV, N-TRIPLES and N3.

You can start the processor with: 

java de.fuberlin.wiwiss.d2r.D2rProcessor -parameter [-parameter]


------------------------------------------------------------------
Testing your installation
------------------------------------------------------------------

------------------------------------------------------------------
1. Test
------------------------------------------------------------------

Start the D2R Map processor with:

java de.fuberlin.wiwiss.d2r.D2rProcessor

If the processor is installed correct and because you have not specified
a map to process, this should case the following error message: 

"D2R Exeption caught: A D2R map has to be specified with the command 
line argument -map:filename."

If you do not get this message, check if d2rmap-V03.jar and the Jena 
jar-files are correctly included in your classpath.


-------------------------------------------------------------------
2. Test
-------------------------------------------------------------------

To run the D2R processor you need a database with the data to be
exported and a D2R MAP to describe the mapping process. 

On Windows Systems: 

1. Create a new ODBC system datasource named IswcDB and link it to the
   Microsoft Access example database D2RROOT/examples/ISWC/ISWC.mdb  

2. Start the D2R Map processor with:
   
   java de.fuberlin.wiwiss.d2r.D2rProcessor -map:D2RROOT/examples/ISWC/ISWCMap.d2r.xml

   The processor is now exporting data from the Access database and 
   you should get the same RDF output as stored in the file
   D2RROOT/examples/ISWC/output/output-RDF-XML.rdf.xml

On Non-Windows Systems: 

1. Generate a new database in your preferred RDBMS and import the data from
   D2RROOT/examples/ISWC/ISWC_data.sql in your RDBMS.

2. Change the JDBC configuration in the file D2RROOT/examples/ISWC/ISWCMap.d2r.xml
   according to your RDBMS. You must use the jdbcDriver and jdbcDSN attributes in
   the <d2r:DBConnection> element. See D2R language specification for details.

3. Start the D2R Map processor with:
   
   java de.fuberlin.wiwiss.d2r.D2rProcessor -map:D2RROOT/examples/ISWC/ISWCMap.d2r.xml

   The processor is now exporting data from the Access database and 
   you should get the same RDF output as stored in the file
   D2RROOT/examples/ISWC/output/output-RDF-XML.rdf.xml


-------------------------------------------------------------------
Building D2R V0.3
-------------------------------------------------------------------

The Ant build scripts 

build.bat (Windows) and 
build.sh (Unix/Mac)

support building a

1. normal D2R jar (dist)
2. executable D2R jar (dist-full)
3. deleting the generated files (clean)


-------------------------------------------------------------------------
Feedback, Bug reports
-------------------------------------------------------------------------

Please send feedback and bug reports to: chris@bizer.de

-------------------------------------------------------------------------


Have fun :-)

Chris

